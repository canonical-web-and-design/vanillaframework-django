#! /usr/bin/env bash

# CAUTION:
# This file was generated by generator-canonical-webteam@1.1.1
# and should usually not be edited directly.
#
# This file was generated by the "canonical-webteam" Yeoman generator
# https://npmjs.org/package/generator-canonical-webteam
#
# Update it to the latest version with:
#
# $ sudo npm install -g yo generator-canonical-webteam
# $ yo canonical-webteam:run

set -euo pipefail

USAGE="How to use ./run v1.1.1
===

  $ ./run \\
    [-m|--node-module PATH]  # A path to a local node module to use instead of the installed dependencies \\
    [--no-debug]             # Turn off the DEBUG setting \\
    [COMMAND]                # Optionally provide a command to run

If no COMMAND is provided, \`serve\` will be run.

Commands
---

- serve [-p|--port PORT] [-w|--watch] [-d|--detach]: Run a development server (optionally running \`watch\` in the background)
- watch [-s|--watch-site]: Run \`yarn run watch\` (for jekyll sites, watch for changes with \`--watch-site\`)
- build: Run \`yarn run build\`
- test: Run \`yarn run test\`
- stop: Stop any running containers
- node [-p|--expose-port PORT] <args>: Run a command in the node container (optionally exposing a port to the host)
- python [-p|--expose-port PORT] <args>: Run a command in a python container (optionally exposing a port to the host)
- bundler [-p|--expose-port PORT] <args>: Run a command in a bundler container (optionally exposing a port to the host)
- clean: Remove all images and containers, any installed dependencies and the .docker-project file
- clean-cache: Empty cache files, which are saved between projects (eg, yarn)
"

##
# Variable definitions
##

# Define docker images versions
python_image="canonicalwebteam/python3:v1.1.0"
ruby_image="canonicalwebteam/ruby:v0.1.1"
node_image="canonicalwebteam/node:v0.2.1"

# Global volume names
yarn_cache_volume="${CANONICAL_WEBTEAM_YARN_CACHE_VOLUME:-canonical-webteam-node-cache}"
pip_cache_volume="${CANONICAL_WEBTEAM_PIP_CACHE_VOLUME:-canonical-webteam-pip-cache}"

# Interactivity options
[ -t 1 ] && tty="--tty --interactive" || tty=""           # Do we have a terminal?
[ -f .env ] && env_file="--env-file .env" || env_file=""  # Do we have an env file?

# Defaults environment settings
PORT=8000
RUN_DEBUG=true

# Other variables
run_serve_docker_opts="${CANONICAL_WEBTEAM_RUN_SERVE_DOCKER_OPTS:-}"
module_volumes=()


##
# Check docker is installed correctly
##
if ! command -v docker >/dev/null 2>&1; then
    echo "
    Error: Docker not installed
    ==
    Please install Docker before continuing:
    https://www.docker.com/products/docker
    "
    exit 1
fi
if grep -q '^docker:' /etc/group && ! groups | grep -q '\bdocker\b'; then
    echo "
    Error: `whoami` not in docker group
    ===
    Please add this user to the docker group, e.g. with:
    \$ newgrp docker
    "
    exit 1
fi

# Generate the project name
if [[ -f ".docker-project" ]]; then
    project=$(cat .docker-project)
else
    directory=$(basename `pwd`)
    hash=$((pwd | md5sum 2> /dev/null || md5 -q -s `pwd`) | cut -c1-8)
    project=canonical-webteam-${directory}-${hash}
    echo $project > .docker-project
fi

# Set project specific container names
python_local_volume="${project}-python-local"
ruby_local_volume="${project}-ruby-local"
db_container="${project}-db"
pip_container="${project}-pip"
gem_container="${project}-gem"
db_volume="${project}-db"
network_name="${project}-net"

# Import environment settings
if [ -f .env ]; then
    export $(cat .env | grep -v ^\# | xargs)
fi

invalid() {
    message=${1}
    echo "Error: ${message}"
    echo ""
    echo "$USAGE"
    exit 1
}

# Read optional arguments
while [[ -n "${1:-}" ]] && [[ "${1:0:1}" == "-" ]]; do
    key="$1"

    case $key in
        --no-debug) RUN_DEBUG=false ;;
        -m|--node-module)
            if [ -z "${2:-}" ]; then invalid "Missing module name. Usage: --node-module <path-to-module>."; fi
            module_volumes+=("--volume" "${2}":"`pwd`/node_modules/$(basename ${2})")
            shift
        ;;
        -h|--help) echo "$USAGE"; exit ;;
        -v|--version) echo "Generated from generator-canonical-webteam@1.1.1"; exit ;;
        *) invalid "Option '${key}' not recognised." ;;
    esac
    shift
done

create_current_user () {
    image="${1}"
    etc_volume="${2}"
    uid=$(id -u)
    gid=$(id -g)

    if ! docker volume inspect ${etc_volume} &> /dev/null; then
        docker run --rm --volume ${etc_volume}:/etc ${image} bash -c "grep -P '${gid}:$' /etc/group &> /dev/null || groupadd -g ${gid} app-user"
        docker run --rm --volume ${etc_volume}:/etc ${image} bash -c "grep -P 'x:${uid}:' /etc/passwd &> /dev/null || useradd -u ${uid} -g ${gid} app-user"
    fi
}

kill_container () {
    container_name="${1}"

    # Kill any previous containers
    previous_id=$(docker ps --all --quiet --filter "name=^/${container_name}$")
    if [ -n "${previous_id}" ]; then
        docker rm --force ${previous_id} > /dev/null;
    fi
}

docker_run () {
    # Get options
    container_name=${1}; shift  # Get container_name as first argument

    # Kill existing containers
    kill_container "${container_name}"

    # Start the new container
    docker run  \
        --name ${container_name}  `# Name the container` \
        --rm                      `# Remove the container once it's finished`  \
        ${env_file}               `# Pass environment variables into the container, if file exists`  \
        --volume `pwd`:`pwd`      `# Mirror current directory inside container`  \
        --workdir `pwd`           `# Set current directory to the image's work directory`  \
        ${tty}                    `# Attach a pseudo-terminal, if relevant`  \
        $@                        `# Extra arguments`
}

ruby_run () {
    container_name="${1}"; shift
    extra_options="${1:-}"; shift

    # Kill existing containers
    kill_container "${container_name}"

    # Create etc volume with the new user
    create_current_user "${ruby_image}" "${project}-bundler-etc"

    # Update dependencies if required
    if [ -f Gemfile ]; then
        if type md5sum &> /dev/null; then
            gemfile_hash=$(md5sum Gemfile | awk '{print $1;}')
        else
            gemfile_hash=$(md5 Gemfile | awk '{print $4;}')
        fi

        if [ ! -f ".gemfile.${project}.hash" ] || [ "$(cat .gemfile.${project}.hash)" != "${gemfile_hash}" ]; then
            echo "Updating dependencies from Gemfile:" >> /dev/stderr
            docker_run "${gem_container}" \
                --volume ${ruby_local_volume}:/usr/local  `# Store dependencies in a docker volume`  \
                ${ruby_image} bundle install               # Install new dependencies
            echo -n "${gemfile_hash}" > .gemfile.${project}.hash
        fi
    fi

    # Run a command in the "bundler" image
    docker_run "${container_name}" \
        --user $(id -u):$(id -g)                  `# Use the current user`  \
        --volume ${project}-bundler-etc:/etc      `# Use etc with corresponding user added`  \
        --volume ${ruby_local_volume}:/usr/local  `# Persist ruby dependencies in a docker volume`  \
        ${extra_options}                          `# Extra options`  \
        ${ruby_image} $@                       `# Run the jeklyll command`
}

node_run () {
    # Standard options for running node commands
    container_name="${1}"; shift
    extra_options="${1:-}"; shift

    # Create etc volume with the new user
    create_current_user "${node_image}" "${project}-node-etc"

    # Run a command in the "node" image
    docker_run "${container_name}" \
        --user $(id -u):$(id -g)                                 `# Use the current user`  \
        --volume ${project}-node-etc:/etc                        `# Use etc with corresponding user added`  \
        --volume ${yarn_cache_volume}:/home/shared/.cache/yarn/  `# Bind cache to volume` \
        ${module_volumes[@]+"${module_volumes[@]}"}              `# Add any override modules as volumes`  \
        ${extra_options}                                         `# Extra options`  \
        ${node_image} ${@}                                       `# Run command in node image`
}

node_install () {
    # Install bower dependencies, if we need to
    if [ -f "bower.json" ]; then
        node_run "${project}-bower-install" "" bower install
    fi

    # Create etc volume with the new user
    create_current_user "${node_image}" "${project}-node-etc"

    # Run a command in the "node" image
    docker_run "${project}-yarn-install"  \
        --user $(id -u):$(id -g)                                 `# Use the current user`  \
        --volume ${project}-node-etc:/etc                        `# Use etc with corresponding user added`  \
        --volume ${yarn_cache_volume}:/home/shared/.cache/yarn/  `# Bind yarn cache to volume` \
        ${node_image} yarn install                               `# Install yarn dependencies`
}

python_run () {
    container_name="${1}"; shift
    extra_options="${1:-}"; shift

    # Create etc volume with the new user
    create_current_user "${python_image}" "${project}-python-etc"

    # Update dependencies if required
    if [ -f requirements.txt ]; then
        if type md5sum &> /dev/null; then
            requirements_hash=$(md5sum requirements.txt | awk '{print $1;}')
        else
            requirements_hash=$(md5 requirements.txt | awk '{print $4;}')
        fi

        if [ ! -f ".requirements.${project}.hash" ] || [ "$(cat .requirements.${project}.hash)" != "${requirements_hash}" ]; then
            echo "Updating dependencies from requirements.txt:" >> /dev/stderr
            docker_run "${pip_container}" \
                --volume ${python_local_volume}:/usr/local/            `# Store dependencies in a docker volume`  \
                --volume ${pip_cache_volume}:/home/shared/.cache/pip/  `# Bind cache to volume` \
                ${python_image} pip3 install --requirement requirements.txt  # Install new dependencies
            echo -n "${requirements_hash}" > .requirements.${project}.hash
        fi
    fi

    if grep -q django.db.backends.postgresql_psycopg2 */settings.py 2> /dev/null; then
        # Create isolated network
        if ! docker network inspect ${network_name} &> /dev/null; then
            docker network create ${network_name}
        fi
        extra_options="${extra_options} --network ${network_name}"

        # Start the database
        if [[ "${extra_options}" != *"--detach"* ]]; then trap "kill_container ${project}-db" EXIT; fi
        if ! docker inspect -f {{.State.Running}} ${db_container} &>/dev/null; then
            docker run \
                --name ${db_container}       `# Name the container`  \
                --rm                         `# Remove the container once it's finished`  \
                --volume "${db_volume}":/var/lib/postgresql/data  `# Store dependencies in a docker volume`  \
                --network "${network_name}"  `# Use an isolated network`  \
                --network-alias db           `# Call this container "db" on the network so it can be found`  \
                --detach                     `# Run in the background` \
                postgres                     `# Use the image for node version 7`
        fi

        # Provision database for django sites
        if [ -f manage.py ]; then
            # Run a command in the "node" image
            docker_run "${container_name}" \
                --user $(id -u):$(id -g)                               `# Use the current user`  \
                --volume ${project}-python-etc:/etc                    `# Use etc with corresponding user added`  \
                --volume ${python_local_volume}:/usr/local/            `# Store dependencies in a docker volume`  \
                --network "${network_name}"                            `# Use an isolated network`  \
                ${python_image} python3 manage.py migrate              `# Run command in the Python image`
        fi

    fi

    # Choose debug variable
    debug="DEBUG=${RUN_DEBUG}"
    if [ -f manage.py ]; then
        debug="DJANGO_DEBUG=${RUN_DEBUG}"
    elif [ -f app.py ]; then
        debug="FLASK_DEBUG=${RUN_DEBUG}"
    fi

    # Run the command in the python docker image
    docker_run ${container_name} \
        --user $(id -u):$(id -g)                               `# Use the current user`  \
        --volume ${project}-python-etc:/etc                    `# Use etc with corresponding user added`  \
        --volume ${python_local_volume}:/usr/local/            `# Store dependencies in a docker volume`  \
        --env PORT=${PORT}                                     `# Set the port correctly`  \
        --env ${debug}                                         `# Set debug mode`  \
        ${extra_options}                                       `# Any extra docker options`  \
        ${python_image} $@                                     `# Run command in the Python image`
}

# Find current run command
run_command=${1:-}
if [[ -n "${run_command}" ]]; then shift; fi

# Do the real business
case $run_command in
    ""|"serve")
        # Read optional arguments
        detach=""
        run_watcher=false
        while [[ -n "${1:-}" ]] && [[ "${1:0:1}" == "-" ]]; do
            key="$1"

            case $key in
                -d|--detach) detach="--detach" ;;
                -p|--port)
                    if [ -z "${2:-}" ]; then invalid "Missing port number. Usage: --port XXXX"; fi
                    PORT=${2}
                    shift
                ;;
                -w|--watch) run_watcher=true ;;
                *) invalid "Option '${key}' not recognised." ;;
            esac
            shift
        done

        # Setup yarn dependencies
        if [ -f package.json ]; then
            node_install
            node_run "${project}-build" "" yarn run build
        fi

        # Run watch command in the background
        if ${run_watcher}; then
            if [ -z "${detach}" ];  then trap "kill_container ${project}-watch" EXIT; fi
            node_run "${project}-watch" "--detach" yarn run watch  # Run watch in the background
        fi

        # Select run function and run command
        run_function="node_run"
        run_command="yarn run serve"
        run_options=""
        if [ -f manage.py ]; then  # django
            run_function="python_run"
            run_command="python3 manage.py runserver 0.0.0.0:${PORT}"
        elif [ -f app.py ]; then  # flask
            run_function="python_run"
            run_command="flask run --host 0.0.0.0 --port ${PORT}"
            run_options="--env FLASK_APP=app.py"
        elif [ -f _config.yml ]; then  # jekyll
            run_function="ruby_run"
            run_command="jekyll serve -P ${PORT} -H 0.0.0.0"
        fi

        # Run the serve container, publishing the port, and detaching if required
        ${run_function} "${project}-serve" "--env PORT=${PORT} --publish ${PORT}:${PORT} ${detach} ${run_serve_docker_opts} ${run_options}" ${run_command} $*
    ;;
    "stop")
        echo "Stopping all running containers for ${project}"
        running_containers="$(docker ps --quiet --filter name=${project})"
        docker kill ${running_containers}
    ;;
    "watch")
        # Read optional arguments
        watch_site=false
        while [[ -n "${1:-}" ]] && [[ "${1:0:1}" == "-" ]]; do
            key="$1"

            case $key in
                -s|--watch-site)
                    # Error if not a jekyll site
                    if [ ! -f _config.yml ]; then
                        echo "Error: Not a Jekyll site";
                        exit 1;
                    fi
                    watch_site=true
                ;;
                *) invalid "Option '${key}' not recognised." ;;
            esac
            shift
        done
        if ${watch_site}; then
            trap "kill_container ${project}-watch-site" EXIT
            ruby_run "${project}-watch-site" "--detach" jekyll build --watch  # Run site watcher in the background
        fi
        node_install
        node_run "${project}-build" "" yarn run build
        node_run "${project}-watch" "" yarn run watch
    ;;
    "build")
        node_install
        node_run "${project}-build" "" yarn run build
        if [ -f _config.yml ]; then
            # For jekyll sites
            ruby_run "${project}-build-site" "" jekyll build
        fi
    ;;
    "test")
        node_install

        test_error=false

        kill_container "${project}-node-test"
        kill_container "${project}-django-test"
        kill_container "${project}-python-test"
        kill_container "${project}-flake8-test"

        # Run node tests
        if [ -f package.json ]; then
            echo "==="
            echo "Running yarn tests"
            echo "==="
            node_run "${project}-node-test" "" yarn run test || test_error=true
        fi

        # Run django tests
        if [ -f manage.py ]; then
            echo "==="
            echo "Running Django tests"
            echo "==="
            python_run "${project}-django-test" "" python3 manage.py test || test_error=true
        fi

        # Generic python tests
        if [ -f tests.py ]; then
            echo "==="
            echo "Running python tests from tests.py"
            echo "==="
            python_run "${project}-python-test" "" python3 tests.py || test_error=true
        fi

        # Run flake8 (python syntax) checks
        if [ -f manage.py ] || [ -f app.py ] || [ -f tests.py ]; then
            echo "==="
            echo "Running flake8 tests"
            echo "==="
            docker run \
                ${tty} \
                --volume `pwd`:`pwd` \
                --workdir `pwd` \
                --name "${project}-flake8-test" \
                ${python_image} flake8 --exclude '*env*,node_modules' || test_error=true
        fi

        # Report success or failure
        if ${test_error}; then
            echo "==="
            echo "Tests failed"
            echo "==="
            exit 1
        else
            echo "==="
            echo "Tests succeeded"
            echo "==="
        fi
    ;;
    "clean")
        echo "Remove hash files"
        rm -rf .requirements.${project}.hash .gemfile.${project}.hash

        echo "Running 'clean' yarn script"
        node_run "${project}-clean" "" yarn run clean || true  # Run the clean script

        echo "Removing docker objects for project: ${project}"

        echo "- Removing containers using project volumes"
        project_volumes="$(docker volume ls --quiet --filter name=${project})"
        for volume in ${project_volumes}; do
            echo "  > Removing containers using volume ${volume}"
            containers_using_volume="$(docker ps --all --quiet --filter volume=${volume})"
            if [ -n "${containers_using_volume}" ]; then docker rm --force ${containers_using_volume}; fi
        done
        echo "- Removing project volumes"
        if [ -n "${project_volumes}" ]; then docker volume rm --force ${project_volumes}; fi

        echo "- Removing remaining project containers"
        project_containers="$(docker ps --all --quiet --filter name=${project})"
        if [ -n "${project_containers}" ]; then docker rm --force ${project_containers}; fi

        echo "- Removing project networks"
        project_networks="$(docker network ls --quiet --filter name=${project})"
        if [ -n "${project_networks}" ]; then docker network rm ${project_networks}; fi

        echo "Removing .docker-project file"
        rm -rf .docker-project  # Remove the project file
    ;;
    "clean-cache")
        # Clean node cache volume
        echo "Removing cache volume ${yarn_cache_volume}"
        containers_using_volume=$(docker ps --quiet --all --filter "volume=${yarn_cache_volume}")
        if [ -n "${containers_using_volume}" ]; then docker rm --force ${containers_using_volume}; fi
        docker volume rm --force ${yarn_cache_volume}

        if [ -f manage.py ]; then
            # Clean pip cache volume
            echo "Removing cache volume ${pip_cache_volume}"
            containers_using_volume=$(docker ps --quiet --all --filter "volume=${pip_cache_volume}")
            if [ -n "${containers_using_volume}" ]; then docker rm --force ${containers_using_volume}; fi
            docker volume rm --force ${pip_cache_volume}
        fi
    ;;
    "python")
        expose_port=""
        while [[ -n "${1:-}" ]] && [[ "${1:0:1}" == "-" ]]; do
            key="$1"

            case $key in
                -p|--expose-port)
                    if [ -z "${2:-}" ]; then invalid "Missing port number. Usage: --expose-port XXXX"; fi
                    expose_port="--publish ${2}:${2}"
                    shift
                ;;
                *) invalid "Option '${key}' not recognised." ;;
            esac
            shift
        done
        python_run "${project}-python-$(date +'%s')" "${expose_port}" $@
    ;;
    "node")
        expose_port=""
        while [[ -n "${1:-}" ]] && [[ "${1:0:1}" == "-" ]]; do
            key="$1"

            case $key in
                -p|--expose-port)
                    if [ -z "${2:-}" ]; then invalid "Missing port number. Usage: --expose-port XXXX"; fi
                    expose_port="--publish ${2}:${2}"
                    shift
                ;;
                *) invalid "Option '${key}' not recognised." ;;
            esac
            shift
        done
        node_run "${project}-node-$(date +'%s')" "${expose_port}" $@
    ;;
    "bundler")
        expose_port=""
        while [[ -n "${1:-}" ]] && [[ "${1:0:1}" == "-" ]]; do
            key="$1"

            case $key in
                -p|--expose-port)
                    if [ -z "${2:-}" ]; then invalid "Missing port number. Usage: --expose-port XXXX"; fi
                    expose_port="--publish ${2}:${2}"
                    shift
                ;;
                *) invalid "Option '${key}' not recognised." ;;
            esac
            shift
        done
        ruby_run "${project}-bundler-$(date +'%s')" "${expose_port}" $@
    ;;
    *) invalid "Command '${run_command}' not recognised." ;;
esac

